basePath: /api/v1
definitions:
  comments.Comment:
    description: Комментарий к посту
    properties:
      author_id:
        example: 42
        type: integer
      content:
        example: Это очень интересный пост!
        type: string
      created_at:
        example: "2025-01-01T00:00:00Z"
        type: string
      deleted_at:
        type: string
      id:
        example: 1
        type: integer
      likes:
        description: Метаданные
        example: 15
        type: integer
      parent_id:
        description: Для древовидной структуры
        type: integer
      post_id:
        example: 5
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/comments.Status'
        enum:
        - active
        - deleted
        - hidden
        example: active
      updated_at:
        example: "2025-01-02T00:00:00Z"
        type: string
    type: object
  comments.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      details:
        example: Поле 'title' не может быть пустым
        type: string
      message:
        example: Неверный формат данных
        type: string
    type: object
  comments.Status:
    description: Статус комментария
    enum:
    - active
    - deleted
    - hidden
    type: string
    x-enum-varnames:
    - StatusActive
    - StatusDeleted
    - StatusHidden
  posts.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      details:
        example: Поле 'title' не может быть пустым
        type: string
      message:
        example: Неверный формат данных
        type: string
    type: object
  posts.Post:
    description: Пост в блоге
    properties:
      author_id:
        description: Связи
        example: 5
        type: integer
      created_at:
        description: Временные метки
        example: "2025-01-01T00:00:00Z"
        type: string
      description:
        example: Подробное руководство по настройке документации API с помощью Swagger
          в Go-приложениях
        type: string
      html_content:
        description: Отрендеренный HTML
        example: <h1>Заголовок</h1><p>HTML контент поста...</p>
        type: string
      id:
        example: 1
        type: integer
      published_at:
        example: "2025-01-03T12:00:00Z"
        type: string
      raw_content:
        description: Контент
        example: |-
          # Заголовок

          Маркдаун контент поста...
        type: string
      slug:
        example: how-to-setup-swagger-in-go
        type: string
      status:
        allOf:
        - $ref: '#/definitions/posts.Status'
        description: Метаданные
        enum:
        - draft
        - published
        - archived
        example: published
      tags:
        example:
        - golang
        - swagger
        - api
        items:
          type: string
        type: array
      title:
        example: Как настроить Swagger в Go
        type: string
      updated_at:
        example: "2025-01-02T00:00:00Z"
        type: string
      view_count:
        example: 42
        type: integer
    type: object
  posts.Status:
    description: Статус поста
    enum:
    - draft
    - published
    - archived
    type: string
    x-enum-varnames:
    - StatusDraft
    - StatusPublished
    - StatusArchived
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: API для управления блогом с поддержкой OAuth, комментариев и поиска
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Blog Service API
  version: "1.0"
paths:
  /api/v1/posts:
    get:
      parameters:
      - description: Смещение
        in: query
        name: offset
        type: integer
      - description: Количество записей
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/posts.Post'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      summary: Получить список постов
      tags:
      - posts
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные поста
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/posts.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/posts.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - JWT: []
      summary: Создать новый пост
      tags:
      - posts
  /api/v1/posts/{id}:
    delete:
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - JWT: []
      summary: Удалить пост
      tags:
      - posts
    get:
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      summary: Получить пост по ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      parameters:
      - description: ID поста
        in: path
        name: id
        required: true
        type: integer
      - description: Данные поста
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/posts.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - JWT: []
      summary: Обновить пост
      tags:
      - posts
  /api/v1/posts/slug/{slug}:
    get:
      parameters:
      - description: Slug поста
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      summary: Получить пост по slug
      tags:
      - posts
  /health:
    get:
      consumes:
      - application/json
      description: Get status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Check API health
      tags:
      - health
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: JWT токен в формате Bearer {token}
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
